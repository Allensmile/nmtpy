#!/usr/bin/env python

"""Translates a source file using a translation model."""

import os
import sys
import glob
import atexit
import cPickle
import argparse
import importlib
from multiprocessing import Process, Queue, cpu_count

import numpy as np

from nmtpy.logger import Logger
from nmtpy.config import Config
from nmtpy.metrics import get_scorer
from nmtpy.nmtutils import idx_to_sent
from nmtpy.sysutils import *
from nmtpy.iterators import get_iterator
import nmtpy.cleanup as cleanup

log = Logger._logger

"""Worker process which does beam search."""
def translate_model(queue, rqueue, pid, model, beam_size, unnormalized, nbest, seed=1234, mode="beamsearch"):
    from theano.sandbox.rng_mrg import MRG_RandomStreams as RandomStreams
    trng = RandomStreams(seed)
    model.build_sampler()

    def __get_func_call(mode):
        if mode == "beamsearch":
            return 'model.beam_search(data_dict.values(), beam_size=beam_size)'

        if mode == "forced":
            return 'model.gen_sample(data_dict)'

        if mode == "argmax":
            return 'model.gen_sample(data_dict, argmax=True)'

        if mode == "sample":
            return 'model.gen_sample(data_dict)'

    while True:
        req = queue.get()

        # We should avoid this
        if req is None:
            break

        # Get data from queue
        idx, data_dict = req[0], req[1]

        sample, score = eval(__get_func_call(mode))

        # normalize scores according to sequence lengths
        if not unnormalized:
            lengths = np.array([len(s) for s in sample])
            score = score / lengths

        if nbest > 1:
            sidx = np.argsort(score)[:nbest]
        else:
            sidx = np.argmin(score)

        rqueue.put((idx, np.array(sample)[sidx], score[sidx]))


"""Translator starts worker processes, delegates source iterator
to them, waits for the results."""
class Translator(object):
    def __init__(self, beam_size, src_file=None, ref_files=None, nbest=1, n_jobs=8,
                       unnorm=False, seed=1234, mode="beamsearch"):

        self.beam_size = beam_size

        self.src_file = src_file
        self.ref_files = None

        if ref_files:
            # Add ability to use wildcards
            self.ref_files = glob.glob(ref_files)

        self.nbest = nbest
        self.n_jobs = n_jobs
        self.unnorm = unnorm
        self.seed = seed
        self.mode = mode

        # Create worker process pool
        self.processes = [None] * self.n_jobs

    def set_model_params(self):
        # load model parameters and set theano shared variables
        self.tparams = self.__obj.load_params(np.load(self.model_file))
        self.__obj.set_dropout(False)

    def set_model_options(self, model_options, model_file):
        self.model_options = model_options
        self.model_file = model_file

        # Import the module
        self.__class = importlib.import_module("nmtpy.models.%s" % self.model_options['model_type']).Model

        # Create the model
        self.__obj = self.__class(seed=self.seed, **self.model_options)

        # invert dictionary
        self.ref_idict = dict([[v,k] for k,v in self.__obj.trg_dict.iteritems()])

        # If forced and we got a src file and also ref file(s)
        # do the forced decoding
        if self.mode == "forced" and self.src_file and self.ref_files:
            log.info("Using only %s as reference file for forced decoding." % self.ref_files[0])
            self.iterator = get_iterator('bitext')(
                                        self.src_file, self.__obj.src_dict,
                                        self.ref_files[0], self.__obj.trg_dict,
                                        batch_size=1,
                                        n_words_src=self.__obj.n_words_src,
                                        n_words_trg=self.__obj.n_words_trg,
                                        trg_name='y_true')
            self.iterator.prepare_batches()

        # else if we have at least a source file, translate it
        elif self.src_file:
            # Let's do a hack here and pretend that the given
            # file is validation data provided to the model :)
            self.__obj.data['valid_src'] = self.src_file
            if self.ref_files:
                self.__obj.data['valid_trg'] = self.ref_files

            self.__obj.load_valid_data(from_translate=True)
            self.iterator  = self.__obj.valid_iterator

        # If nothing is given translate on validation set
        else:
            log.info("No test data given, assuming validation dataset.")

            # Load validation data from the model
            self.__obj.load_valid_data(from_translate=True)
            self.iterator  = self.__obj.valid_iterator
            self.src_file  = self.__obj.data['valid_src']
            self.ref_files = self.__obj.valid_ref_files

        # Common to each mode
        self.iterator.prepare_batches()

        # Print information
        log.info("Source")
        log.info("  %s" % self.src_file)

        # It's possible that we don't have any reference files, e.g. for test sets.
        if self.ref_files:
            log.info("Reference file(s)")
            for f in self.ref_files:
                log.info("  %s" % f)

    def start(self):
        # create input and output queues for processes
        write_queue = Queue()
        read_queue = Queue()
        # Create processes
        for idx in xrange(self.n_jobs):
            self.processes[idx] = \
                    Process(target=translate_model,
                            args=(write_queue, read_queue, idx, self.__obj, self.beam_size, self.unnorm,
                                  self.nbest, self.seed, self.mode))
            self.processes[idx].start()
            cleanup.register_proc(self.processes[idx].pid)

        cleanup.register_handler()

        # Send data to worker processes
        for idx, data in enumerate(self.iterator):
            write_queue.put((idx, data))

        self.n_sentences = idx + 1
        log.info("Distributed %d sentences to worker processes." % self.n_sentences)

        # Receive the results
        self.trans  = [None] * self.n_sentences
        self.scores = [None] * self.n_sentences

        t = time.time()
        for i in xrange(self.n_sentences):
            resp = read_queue.get()
            self.trans[resp[0]] = resp[1]
            self.scores[resp[0]] = resp[2]
            if (i+1) % 100 == 0:
                t = time.time() - t
                log.info("%d/%d sentences completed (%.2f seconds)" % ((i+1), self.n_sentences, t))
                t = time.time()

        # Stop workers
        for idx in xrange(self.n_jobs):
            write_queue.put(None)
            self.processes[idx].terminate()
            cleanup.unregister_proc(self.processes[idx].pid)

    def write_hyps(self, filename):
        with open(filename, 'w') as f:
            if self.mode == "forced" or self.nbest > 1:
                for idx, (tr, sc) in enumerate(zip(self.trans, self.scores)):
                    if not isinstance(tr, list):
                        tr = [tr]
                        sc = [sc]
                    for t,s in zip(tr, sc):
                        # Convert to actual words
                        f.write("%d ||| %s ||| %.6f\n" % (idx, idx_to_sent(self.ref_idict, t), s))
            else:
                f.write("\n".join([idx_to_sent(self.ref_idict, s) for s in self.trans]))
                f.write("\n")

    def compute_score(self, hyp_file, scorers):
        results = {}
        for scorer in scorers:
            c = get_scorer(scorer)()
            score = c.compute(self.ref_files, hyp_file)
            results[scorer] = (str(score), score.score)
        return results

if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='translate')
    parser.add_argument('-j', '--n-jobs'        , type=int, default=8,
                                                  help="Number of processes (default: 8, 0: Auto")
    parser.add_argument('-b', '--beam-size'     , type=int, default=12,
                                                  help="Beam size (only for beam-search case)")
    parser.add_argument('-N', '--nbest'         , type=int, default=1,
                                                  help="Output n-best list size (only for beam-search case)")
    parser.add_argument('-r', '--seed'          , type=int, default=1234,
                                                  help="Random number seed (default: 1234)")
    parser.add_argument('-d', '--device'        , default='cpu', help="Where to run beam search.")
    parser.add_argument('-D', '--decoder'        ,default='beamsearch', choices=['beamsearch', 'argmax', 'sample', 'forced'], help="Decoding mode")

    parser.add_argument('-m', '--model'         , type=str, help="Model file", required=True)
    parser.add_argument('-M', '--metrics'       , type=str, help="Comma separated list of metrics (bleu or bleu,meteor)", default="bleu")
    parser.add_argument('-p', '--pkl-file'      , type=str, help="pkl file (default: <model_file>.pkl)", default=None)
    parser.add_argument('-o', '--saveto'        , type=str, help="Output translations file (if not given, only metrics will be printed)",
                                                  default=None)

    parser.add_argument('-S', '--src-file'      , type=str, help="Source data (default: validation set)",
                                                  default=None)
    parser.add_argument('-R', '--ref-files'     , type=str, help="Reference files delimited by comma or * wildcard (default: validation set)",
                                                  default=None)

    args = parser.parse_args()

    if args.decoder == "forced" and (args.src_file is None or args.ref_files is None):
        print "Error: Forced decoding requires that you give src and ref files explicitly."
        sys.exit(1)

    if args.device.startswith("gpu"):
        args.n_jobs = 1
    elif args.device.startswith("cpu"):
        if args.n_jobs == 0:
            # Auto infer CPU number
            args.n_jobs = (cpu_count() / 2) - 1

        if args.n_jobs > 1:
            # This is to avoid thread explosion. Allow
            # each process to use a single thread.
            os.environ["OMP_NUM_THREADS"] = "1"
            os.environ["MKL_NUM_THREADS"] = "1"

    # Select device
    os.environ["THEANO_FLAGS"] = "device=%s" % args.device

    translator = Translator(beam_size=args.beam_size, src_file=args.src_file,
                            ref_files=args.ref_files, nbest=args.nbest,
                            n_jobs=args.n_jobs, seed=args.seed, mode=args.decoder)

    # load model options
    if not args.pkl_file:
        args.pkl_file = args.model + ".pkl"

    with open(args.pkl_file, 'rb') as f:
        model_options = fix_model_options(cPickle.load(f))

    translator.set_model_options(model_options, args.model)
    translator.set_model_params()
    translator.start()

    out_file = args.saveto
    if not args.saveto:
        hypf = get_temp_file(suffix=".nbest_hyps")
        out_file = hypf.name
        hypf.close()

    translator.write_hyps(out_file)

    # No need to compute metrics with nbest style files
    if args.decoder != "forced" and args.nbest == 1 and translator.ref_files:
        # Compute all metrics
        results = translator.compute_score(out_file, args.metrics.split(","))
        # NOTE: This dict is expected from nmt-translate for obtaining the validation results.
        print results

    sys.exit(0)
