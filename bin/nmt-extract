#!/usr/bin/env python
"""Extract several features from a trained model."""

import os
import sys
import argparse

import numpy as np

from nmtpy.sysutils import *


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='nmt-extract')
    parser.add_argument('-o', '--output'        , help="Output file (with extension .npy or .tsv).")
    parser.add_argument('-m', '--model'         , help="Model .npz file.")

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--target'        , action='store_true',
                                                  help="Extract target word embeddings")
    group.add_argument('-s', '--source'        , action='store_true',
                                                  help="Extract source word embeddings")

    args = parser.parse_args()
    if not args.output.endswith(('npy', 'tsv')):
        print "Output file should end with .npy or .tsv"
        sys.exit(1)

    params = np.load(args.model)['tparams'].tolist()
    if args.target:
        embs = params['Wemb_dec']
    elif args.source:
        embs = params['Wemb_enc']

    print "Embedding size: %d, Vocabulary size: %d" % (embs.shape[1], embs.shape[0])

    ftype = args.output.split(".")[-1]
    if ftype == "npy":
        np.save(args.output, embs)
    elif ftype == "tsv":
        # Useful for t-SNE wrappers
        with open(args.output, 'w') as f:
            for p in embs:
                f.write("\t".join(["%f" % i for i in p]) + "\n")

    sys.exit(0)
