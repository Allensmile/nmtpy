#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Computes the BLEU, ROUGE, METEOR, and CIDER
using the COCO metrics scripts
"""
import argparse

# Script taken and adapted from Kelvin Xu's arctic-captions project
# https://github.com/kelvinxu/arctic-captions

from nmtpy.cocoeval.bleu.bleu       import Bleu
from nmtpy.cocoeval.rouge.rouge     import Rouge
from nmtpy.cocoeval.cider.cider     import Cider
from nmtpy.cocoeval.meteor.meteor   import Meteor

def load_textfiles(references, hypothesis):
    print "The number of references is {}".format(len(references))

    # Read hypotheses into hypo dict
    hypo = {idx: [lines.strip()] for (idx, lines) in enumerate(hypothesis)}

    # take out newlines before creating dictionary
    raw_refs = [map(str.strip, r) for r in zip(*references)]
    refs = {idx: rr for idx, rr in enumerate(raw_refs)}

    # sanity check that we have the same number of references as hypothesis
    if len(hypo) != len(refs):
        raise ValueError("There is a sentence number mismatch between the inputs")
    return refs, hypo

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Compute BLEU, METEOR, ROUGE and Cider for single or multiple references.")

    parser.add_argument("-p", "--pretty",   action='store_true',            help='Dump results in a pretty way.')
    parser.add_argument("-w", "--write",    action='store_true',            help='Create a score file containing the results.')
    parser.add_argument("-l", "--language", default='en',                   help='Sentence language (default: en)')
    parser.add_argument("hypothesis",       type=argparse.FileType('r'),    help="The hypothesis file")
    parser.add_argument("references",       type=argparse.FileType('r'),    help="Path to all the reference files", nargs='+')

    args = parser.parse_args()
    print "Language: %s" % args.language
    ref, hypo = load_textfiles(args.references, args.hypothesis)

    # List of scorers
    scorers = [
        (Bleu(4), ["Bleu_1", "Bleu_2", "Bleu_3", "Bleu_4"]),
        (Meteor(args.language), "METEOR"),
        (Meteor(args.language, norm=True), "METEOR(norm)"),
        (Rouge(), "ROUGE_L"),
        (Cider(), "CIDEr")
    ]

    result = {}

    for scorer, method in scorers:
        score, scores = scorer.compute_score(ref, hypo)
        if score is None:
            continue
        if type(score) == list:
            for m, s in zip(method, score):
                result[m] = s
        else:
            result[method] = score

    if args.write:
        with open("%s.score" % args.hypothesis.name, 'w') as f:
            f.write("%s\n" % result)

    if args.pretty:
        for metric in sorted(result.keys()):
            print "%s: %3.5f" % (metric, result[metric]),
        print
    else:
        print result
